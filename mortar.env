WORKING_DIR='/etc/mortar/'
PRIVATE_DIR="$WORKING_DIR/private/"

# Permission checks.
if [ "$UID" -ne "0" ]; then echo "Must be run as root."; exit 1; fi
mkdir -p "$PRIVATE_DIR"
chown root:root -R "$PRIVATE_DIR"
chmod go-rwx -R "$PRIVATE_DIR"
chmod go-rwx -R "$WORKING_DIR"
cd "$WORKING_DIR"

TPM_MODE= #1.2 or 2
# Stage 1.
#TARGET_EFI='/efi/EFI/arch/grubx64.efi' #Script with append ".signed" to this file. Use it to boot.
EFI_ROOT= #Change this for your distro. This is the root of the efi partition and likely contains a directory called "EFI" `mount | grep -i efi` may be helpful. Must end with a / e.g. /efi/ /boot/efi/ etc. Next line tries its best if this isn't set.
if [ -z "$EFI_ROOT" ]; then if (mount | grep "on /boot/efi ">/dev/null); then EFI_ROOT="/boot/efi/"; elif (mount | grep "on /efi ">/dev/null); then EFI_ROOT="/efi/"; fi; fi
EFI_DIR="EFI/" # Path inside the efi_root to place the efi file. Must end in a /
EFI_NAME="mortarsecureboot-linux.efi" # Name of the efi file to generate and sign.
PRETTY_NAME="Mortar Secureboot Linux"
TARGET_EFI="$EFI_ROOT""$EFI_DIR""$EFI_NAME" # Ultimate location of the signed efi file. Use this to boot. 
hostname=$HOSTNAME
if [ -z $hostname ]; then hostname=$HOST; fi
KEY_UUID=
SECUREBOOT_MODIFIER="-mortarsecureboot-$hostname" #Added in the secureboot key generation CN to denote that they are yours.
CMDLINEFILE="/etc/mortar/cmdline.conf"
EFISTUBFILE="/usr/lib/systemd/boot/efi/linuxx64.efi.stub"
SECUREBOOT_DB_KEY=$PRIVATE_DIR'db.key'
SECUREBOOT_DB_CRT=$PRIVATE_DIR'db.crt'

# Stage 2. 
SECUREBOOT_DB_AUTH=$PRIVATE_DIR'db.auth'
SECUREBOOT_DB_ESL=$PRIVATE_DIR'db.esl'
SECUREBOOT_PK_CRT=$PRIVATE_DIR'PK.crt'
SECUREBOOT_PK_ESL=$PRIVATE_DIR'PK.esl'
SECUREBOOT_PK_KEY=$PRIVATE_DIR'PK.key'
SECUREBOOT_PK_AUTH=$PRIVATE_DIR'PK.auth'
SECUREBOOT_KEK_CRT=$PRIVATE_DIR'KEK.crt'
SECUREBOOT_KEK_ESL=$PRIVATE_DIR'KEK.esl'
SECUREBOOT_KEK_AUTH=$PRIVATE_DIR'KEK.auth'
SECUREBOOT_KEK_KEY=$PRIVATE_DIR'KEK.key'

# Stage 4.
CRYPTDEV= #LUKS Partition e.g. /dev/nvme0n1p3 next line will give it the old college try if this is left blank. 
if [ -z "$CRYPTDEV" ]; then temp=$(head -n1 /etc/crypttab | awk '{ print $2 }'); if [ -e "$temp" ]; then CRYPTDEV="$temp"; else if [[ "$temp" == "UUID="* ]]; then CRYPTDEV=$(echo "$temp" | cut -f2 -d'='); unset temp; fi ;fi
CRYPTNAME= #Unlocked name (find in crypttab) e.g. luks-disk next line will give it the old college try if this is left blank.
if [ -z "$CRYPTNAME" ]; then CRYPTNAME=$(head -n1 /etc/crypttab | awk '{ print $1 }'); fi
UUID="xxxxxxx-xxxxxxxx-xxxxxxxxx-xxxxxxxxxx" #OF THE KEYSLOT NOT THE DISK find with `luksmeta show -d /dev/nvmluks0p3` and check the slot uuid.
SLOT="1" #Keyslot number for use with automatic unlocks. 
HEADERFILE="./luksheaderbackup.raw" # Don't worry about this. 
HEADERSHA256=
